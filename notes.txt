nginx_core 部分源码阅读

仰望天空与脚踏实地，要是你，你怎么选，目标不是一蹴而就，需要长时间的磨练。

1.ngx_array 数组
	1.每个数组在初始化时候会使用内存池(ngx_palloc)来分配数组结构体内存，并不直接调用系统分配。
　　2.每个数组对应一个内存池。
	3.加入一个（n个）元素。
	4.我认为对于每个数组分配的内存池，还是专池专用，最好不要把内存池分配给别的数组。

2.ngx_palloc 内存池管理
	1.内存池的原理阅读完后比较通俗易懂：分配内存，超过当前内存池最大空间，分配大块内存。
	没有超过，字节对其后，剩余大小满足，分配内存，剩余大小不满足，分配新的内存池，并进行分配。
	2.在看代码时候，对于结构体的理解是最重要的，以及其用意要理解。
	
3. ngx_list 链表
	1.链表的大小，是一个固定的数组，对于一个链表，其实是多个数组的链表。
	
4.ngx_queue 队列
	1.第一个元素不用作为哨兵，其是一个双循环链表。
	2.ngx_queue_split 意义在于?????? 不是太明白
	3.双循环链表使用的哨兵方法，可以在项目中使用，感觉不错。
	
5.ngx_thread_pool 线程池
	1.线程池涉及的知识点比较多。
	2.线程池的逻辑理解也比较复杂，互相之间的关联比较多。
	3.基本原理：线程池创建多个线程，线程执行的过程全部以任务队列为主，有点像生产者-》消费者。之间通过条件变量控制。即使关闭线程，也是往任务队列中加入退出任务。
	4.当退出线程时，直接pthread_exit，是一个很好的方法。这样不用确定线程是否关闭，以及一些流程上的控制。入pthread_testcancel等。减少了复杂的程度。以后在自己
      设计线程池时候可以借鉴这种方法。但是我想，如果任务过多，那么也许加入的退出任务可能需要很久才能执行到，而且销毁时候是一个个判断的是否退出成功，也许可能
	  会发生等待退出时间过长的几率吧（个人观点）。
	5.当前内存池的设计是线程池和任务队列的绑定，感觉其设计可以说是一个内存池对应一个数据处理队列，对于等待的任务超过了队列最大数，也就不许加入新的任务了。
	
6.ngx_str_t 字符串
	1.字符串主要结构体是指定长度的数组。
	2.从其初始化函数，可以看出传递的字符串正常来说是常量字符串。
	3.此模块我没有比较细致的阅读，只是浏览了一下，看见其大多数是按照系统提供的string类来实现的相同功能。
	4.我们可以主要学习一下，不定长度参数函数的实现，以及处理方法。
	5.此字符串长度是计算常量字符串的'\0'的。
	
7.ngx_connection socket连接
	
	